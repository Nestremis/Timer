{"version":3,"sources":["CalculateTime.js","glass-clink-1.mp3","bell-ring.mp3","App.js","index.js"],"names":["calculateTime","seconds","hours","Math","floor","minutes","Timer","useState","setSeconds","isActive","setIsActive","useSound","glassClink","volume","play","bell","playBell","timeArray","setTimeArray","useEffect","interval","setInterval","clearInterval","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAgBiBA,MAhBjB,SAAwBC,GACpB,IAAIC,EAAQC,KAAKC,MAAMH,EAAU,MAC7BI,EAAUF,KAAKC,OAAOH,EAAmB,KAARC,GAAkB,IAOvD,OANAD,EAAUA,EAAmB,KAARC,EAA2B,GAAVG,EAMhC,CAJYH,EAAQ,GAAR,WAAiBA,GAASA,EACxBG,EAAU,GAAV,WAAmBA,GAAWA,EAC9BJ,EAAU,GAAV,WAAmBA,GAAYA,ICPxC,MAA0B,0CCA1B,MAA0B,sCCgH1BK,EAxGD,WAAO,IAAD,EAEYC,mBAAS,MAFrB,mBAEXN,EAFW,KAEFO,EAFE,OAGcD,oBAAS,GAHvB,mBAGXE,EAHW,KAGDC,EAHC,OAIHC,YAASC,EAAY,CAAEC,OAAQ,MAAvCC,EAJW,sBAKCH,YAASI,EAAM,CAAEF,OAAQ,KAArCG,EALW,sBAMgBT,mBAAS,IANzB,mBAMXU,EANW,KAMAC,EANA,KAiEjB,OAzDDC,qBAAU,WACR,IAAIF,EAAYjB,EAAcC,GAC9BiB,EAAaD,KACZ,CAAChB,IAWJkB,qBAAU,WACLlB,EAAU,GAAKQ,GACjBK,MAEA,CAACL,IAgBJU,qBAAU,WACR,IAAIC,EAAW,KAWf,OAVIX,EACFW,EAAWC,aAAY,WACrBb,GAAW,SAAAP,GAAO,OAAIA,EAAU,KAChB,IAAZA,GACFO,EAAW,QAEZ,KACOC,GAAwB,IAAZR,GACtBqB,cAAcF,GAET,kBAAME,cAAcF,MAC1B,CAACX,EAAUR,IAGdkB,qBAAU,WACK,IAAVlB,GAAeQ,GACjBO,MAEA,CAACP,EAAUR,IAIZ,qBAAKsB,UAAU,MAAf,SAEG,sBAAKA,UAAU,UAAf,UAEG,4CACA,yCAEA,sBAAKA,UAAU,UAAf,UACI,wBAAQA,UAAU,gBAAgBC,QAxC9C,WACEhB,EAAWP,EAAU,KAuCX,iBADJ,eAGI,wBAAQsB,UAAU,gBAAgBC,QAtC9C,WACEhB,EAAWP,EAAU,KAqCX,oBAGJ,0BAASsB,UAAS,eAAUd,EAAW,SAAS,YAAhD,UACM,kCAAKQ,EAAU,GAAf,OACA,qCACA,4BAAIA,EAAU,QAIpB,sBAAKM,UAAU,MAAf,UAEE,wBAAQA,UAAS,+CAA0Cd,EAAW,SAAW,YAAce,QAAS,WA1EhHd,GAAaD,GAiBTA,GAAUK,KAyDN,SACKL,EAAW,QAAU,YAGxB,wBAAQc,UAAU,aAAaC,QA3E3C,WACEhB,EAAW,MACXE,GAAY,IAyEF,4BChGde,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.79129be1.chunk.js","sourcesContent":["function calculateTime (seconds) {\r\n    let hours = Math.floor(seconds / 3600);\r\n    let minutes = Math.floor((seconds - (hours * 3600 )) / 60 );\r\n    seconds = seconds - (hours * 3600) - (minutes * 60 );\r\n\r\n    let hoursFormat = hours < 10 ? `0${hours}`: hours;\r\n    let minutesFormat = minutes < 10 ? `0${minutes}`: minutes;\r\n    let secondsFormat = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n    return[\r\n      hoursFormat, \r\n      minutesFormat,\r\n      secondsFormat\r\n    ]\r\n  }\r\n\r\n  export default calculateTime;","export default __webpack_public_path__ + \"static/media/glass-clink-1.9caa9177.mp3\";","export default __webpack_public_path__ + \"static/media/bell-ring.57d5e004.mp3\";","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport useSound from 'use-sound';\nimport calculateTime from './CalculateTime';\nimport glassClink from './glass-clink-1.mp3';\nimport bell from './bell-ring.mp3';\n\n\nconst Timer = () => {\n\n  const [seconds, setSeconds] = useState(1220);\n  const [isActive, setIsActive] = useState(false);\n  const [play] = useSound(glassClink, { volume: 0.05 });\n  const [playBell] = useSound(bell, { volume: 0.2 });\n  const [timeArray, setTimeArray] = useState([]);\n\n  useEffect(() => {\n    let timeArray = calculateTime(seconds);\n    setTimeArray(timeArray);\n  }, [seconds])\n\n  function toggle() {\n    setIsActive(!isActive);\n  }\n\n  function reset() {\n    setSeconds(1220);\n    setIsActive(false);\n  }\n\n  useEffect(()=> {\n    if(seconds > 1 && isActive) {\n     play();\n    }\n  }, [isActive]);\n\n\n\n  function dink () {\n    if(!isActive) play() \n  }\n\n  function minusMinutes () {\n    setSeconds(seconds - 60);\n  }\n\n  function plusMinutes () {\n    setSeconds(seconds + 60);\n  }\n \n  useEffect(() => {\n    let interval = null;\n    if (isActive ) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n        if (seconds === 0) {\n          setSeconds(1220)\n        }\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n\n\n  useEffect(()=> {\n    if(seconds===1 && isActive) {\n     playBell();\n    }\n  }, [isActive, seconds]);\n\n \n   return (\n    <div className=\"app\">\n\n       <div className='wrapper'>      \n\n          <h1> 20/20/20 </h1>\n          <h3> timer </h3>\n\n          <div className='session'> \n              <button className='changeMinutes' onClick={minusMinutes}> - </button>\n              session time             \n              <button className='changeMinutes' onClick={plusMinutes} > + </button>              \n          </div>\n\n          <section className={`time-${isActive ? 'active':'inactive'}`}>\n                <p> {timeArray[1]} </p>\n                <span>:</span>\n                <p>{timeArray[2]}</p>\n          </section>      \n\n                  \n          <div className='row'>\n\n            <button className={`button button-primary button-primary-${isActive ? 'active' : 'inactive'}`} onClick={()=>{toggle(); dink(); } }>\n                {isActive ? 'pause' : 'start !'}\n              </button>\n\n              <button className='button-res' onClick={reset}>\n                reset\n              </button>\n\n          </div>\n\n      </div>\n    </div>\n  );\n};\n\n\nexport default Timer;\n\n// src=\"https://www.soundjay.com/misc/sounds/bell-ringing-05.mp3\"","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}