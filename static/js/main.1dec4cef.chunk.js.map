{"version":3,"sources":["CalculateTime.js","App.js","index.js"],"names":["calculateTime","seconds","hours","Math","floor","minutes","Timer","useState","setSeconds","isActive","setIsActive","timeArray","setTimeArray","useEffect","interval","setInterval","clearInterval","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAgBiBA,MAhBjB,SAAwBC,GACpB,IAAIC,EAAQC,KAAKC,MAAMH,EAAU,MAC7BI,EAAUF,KAAKC,OAAOH,EAAmB,KAARC,GAAkB,IAOvD,OANAD,EAAUA,EAAmB,KAARC,EAA2B,GAAVG,EAMhC,CAJYH,EAAQ,GAAR,WAAiBA,GAASA,EACxBG,EAAU,GAAV,WAAmBA,GAAWA,EAC9BJ,EAAU,GAAV,WAAmBA,GAAYA,IC+DxCK,EAjED,WAAO,IAAD,EACYC,mBAAS,GADrB,mBACXN,EADW,KACFO,EADE,OAEcD,oBAAS,GAFvB,mBAEXE,EAFW,KAEDC,EAFC,OAIgBH,mBAAS,IAJzB,mBAIXI,EAJW,KAIAC,EAJA,KAiCjB,OA3BDC,qBAAU,WACR,IAAIF,EAAYX,EAAcC,GAC9BW,EAAaD,KACZ,CAACV,IAWJY,qBAAU,WACR,IAAIC,EAAW,KAQf,OAPIL,EACFK,EAAWC,aAAY,WACrBP,GAAW,SAAAP,GAAO,OAAIA,EAAU,OAC/B,KACOQ,GAAwB,IAAZR,GACtBe,cAAcF,GAET,kBAAME,cAAcF,MAC1B,CAACL,EAAUR,IAIZ,sBAAKgB,UAAU,MAAf,UAGC,2CAEC,sBAAKA,UAAU,OAAf,UACE,kCAAKN,EAAU,GAAf,OACA,qCACA,kCAAKA,EAAU,GAAf,OACA,qCACA,4BAAIA,EAAU,QAIhB,sBAAKM,UAAU,MAAf,UACE,wBAAQA,UAAS,+CAA0CR,EAAW,SAAW,YAAcS,QAtCrG,WACER,GAAaD,IAqCT,SACGA,EAAW,QAAU,UAIxB,wBAAQQ,UAAU,aAAaC,QAvCrC,WACEV,EAAW,GACXE,GAAY,IAqCR,0BCvDRS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1dec4cef.chunk.js","sourcesContent":["function calculateTime (seconds) {\r\n    let hours = Math.floor(seconds / 3600);\r\n    let minutes = Math.floor((seconds - (hours * 3600 )) / 60 );\r\n    seconds = seconds - (hours * 3600) - (minutes * 60 );\r\n\r\n    let hoursFormat = hours < 10 ? `0${hours}`: hours;\r\n    let minutesFormat = minutes < 10 ? `0${minutes}`: minutes;\r\n    let secondsFormat = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n    return[\r\n      hoursFormat, \r\n      minutesFormat,\r\n      secondsFormat\r\n    ]\r\n  }\r\n\r\n  export default calculateTime;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport calculateTime from './CalculateTime';\n\n\nconst Timer = () => {\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n\n  const [timeArray, setTimeArray] = useState([]);\n\n  useEffect(() => {\n    let timeArray = calculateTime(seconds);\n    setTimeArray(timeArray);\n  }, [seconds])\n\n  function toggle() {\n    setIsActive(!isActive);\n  }\n\n  function reset() {\n    setSeconds(0);\n    setIsActive(false);\n  }\n\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n\n \n   return (\n    <div className=\"app\">\n     \n\n     <h1> COUNTER </h1>\n\n      <div className=\"time\">\n        <p> {timeArray[0]} </p>\n        <span>:</span>\n        <p> {timeArray[1]} </p>\n        <span>:</span>\n        <p>{timeArray[2]}</p>\n      </div>      \n      \n      \n      <div className=\"row\">\n        <button className={`button button-primary button-primary-${isActive ? 'active' : 'inactive'}`} onClick={toggle}>\n          {isActive ? 'Pause' : 'Start'}\n        </button>\n\n\n        <button className='button-res' onClick={reset}>\n          Reset\n        </button>\n\n\n      </div>\n    </div>\n  );\n};\n\n\nexport default Timer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}